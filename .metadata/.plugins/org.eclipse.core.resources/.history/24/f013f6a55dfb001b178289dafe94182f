package com.algaworks.algalog.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.algaworks.algalog.domain.model.Client;
import com.algaworks.algalog.domain.repository.ClientRepository;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@RestController
@RequestMapping("/clientes")
public class ClientController {

	private ClientRepository clientRepository;

	@GetMapping
	public List<Client> list() {
		return clientRepository.findAll();
	}

	@GetMapping("/{clientId}")
	public ResponseEntity<Client> getById(@PathVariable Long clientId) {
		return clientRepository.findById(clientId).map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());

		// Second implementation
//		return clientRepository.findById(clientId).map(client -> ResponseEntity.ok(client))
//				.orElse(ResponseEntity.notFound().build());

		// Firt implementation
//		Optional<Client> client =  clientRepository.findById(clientId);

//		if(client.isPresent()) {
//			return ResponseEntity.ok(client.get());
//		}
//		
//		return ResponseEntity.notFound().build();
	}
	
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public Client add(@RequestBody Client client) {
		return clientRepository.save(client);
	}
	
	@PutMapping("/{clientId}")
	public ResponseEntity<Client> update(@PathVariable Long clientId, @RequestBody Client client) {
		if(!clientRepository.existsById(clientId)) {
			return ResponseEntity.notFound().build();
		}
		
		client.setId(clientId);
		client = clientRepository.save(client);
		
		return ResponseEntity.ok(client);
	}
	
	@DeleteMapping("/clientId")
	public ResponseEntity<Client> delete(@PathVariable Long clientId) {
		if(!clientRepository.existsById(clientId)) {
			return ResponseEntity.notFound().build();
		}
		
		return clientRepository.deleteById(clientId);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
